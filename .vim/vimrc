" ~/.vimrc

setglobal nocompatible

if !empty($XDG_DATA_HOME)
  let s:data_home = substitute($XDG_DATA_HOME, '/$', '', '') . '/vim/'
else
  let s:data_home = expand('~/.local/share/vim/')
endif

let g:mapleader=' '
let g:maplocalleader="\\"
let g:polyglot_disabled = ['sensible', 'markdown', 'elixir']

call plug#begin(s:data_home . 'bundle')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'scrooloose/nerdtree'

Plug 'michaeljsmith/vim-indent-object'
Plug 'mileszs/ack.vim'
Plug 'Raimondi/delimitMate'
Plug 'tommcdo/vim-lion'

Plug 'AndrewRadev/splitjoin.vim'
Plug 'AndrewRadev/sideways.vim'
Plug 'AndrewRadev/multichange.vim'
Plug 'AndrewRadev/writable_search.vim'
Plug 'AndrewRadev/deleft.vim'

Plug 'tommcdo/vim-exchange'
Plug 'kana/vim-smartword'

Plug 'tpope/vim-abolish'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'

Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'preservim/vim-markdown'
Plug 'elixir-lang/vim-elixir'
Plug 'sheerun/vim-polyglot'

Plug 'pbrisbin/vim-mkdir'
Plug 'w0rp/ale'

Plug 'hrsh7th/vim-vsnip'
let g:vsnip_snippet_dir = expand('~/.vim/vsnip')
let g:vsnip_filetypes = {}
let g:vsnip_filetypes.ruby = ['rails']
imap <expr> <C-j> vsnip#available(1) ? "<Plug>(vsnip-expand-or-jump)" : "<C-j>"
imap <expr> <C-k> vsnip#jumpable(-1) ? "<Plug>(vsnip-jump-prev)"      : "<C-k>"

Plug 'terryma/vim-smooth-scroll'
Plug 'ton/vim-bufsurf'
nmap ]b <Plug>(buf-surf-forward)
nmap [b <Plug>(buf-surf-back)

Plug 'morhetz/gruvbox'
Plug 'ap/vim-css-color'
call plug#end()

filetype plugin indent on
syntax enable

" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
  runtime! macros/matchit.vim
endif

" Enable the :Man command shipped inside Vim's man filetype plugin.
if exists(':Man') != 2 && !exists('g:loaded_man') && &filetype !=? 'man' && !has('nvim')
  runtime ftplugin/man.vim
endif

let g:loaded_2html_plugin     = 1
let g:loaded_getscriptPlugin  = 1
let g:loaded_gzip             = 1
let g:loaded_logipat          = 1
let g:loaded_rrhelper         = 1
let g:loaded_spellfile_plugin = 1
let g:loaded_tarPlugin        = 1
let g:loaded_vimballPlugin    = 1
let g:loaded_zipPlugin        = 1

augroup vimrc
  autocmd!
augroup END

" Section: indent settings
set autoindent
set expandtab
set shiftround
set smarttab
set shiftwidth=2

" Section: better navigation
set foldmethod=marker
set foldopen-=hor
set foldtext=misc#fold_text_emacs()
set hlsearch
set ignorecase
set incsearch
set mouse=a
set scrolloff=0
set sidescroll=1
set sidescrolloff=1
set smartcase
set tagcase=match

" Section: editing
set backspace=2
set complete-=i
set completeopt=menuone,noselect
set formatoptions=croqnj
set infercase
set nojoinspaces
set pumheight=20

" Section: display settings
set display+=lastline
set laststatus=2
set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮,nbsp:␣
set nowrap
set number
set ruler
set shortmess=acTOI
set showcmd
set showmode
set signcolumn=number
set statusline=%F\ %M%=%y%w%r%h\ %{&fenc}\ %-10((%l,%c)%)\ %P
augroup vimrc
  autocmd InsertEnter * set listchars-=trail:·
  autocmd InsertLeave * set listchars+=trail:·
augroup END

" Section: files
set autoread
set encoding=utf-8
set nobackup
set noswapfile
set nowritebackup
set undofile
let &undodir = s:data_home . 'undo//'
if !isdirectory(&undodir) | call mkdir(&undodir, 'p') | endif
let &viminfo = "!,'100,n" . s:data_home . 'viminfo'

" Section: command-line
set history=1000
set wildmenu
set wildmode=list:longest,full

" Section: misc settings
set belloff=all
set noequalalways
set nrformats-=octal
set report=0
set sessionoptions-=options
set splitbelow
set splitright
set synmaxcol=200
set tags^=.git/tags;~
set tildeop
set timeoutlen=500
set ttimeout
set ttimeoutlen=50
set ttyfast

" Section: color scheme
let g:gruvbox_contrast_dark = 'soft'
let g:gruvbox_italics = 0
let g:gruvbox_sign_column = 'dark0_soft'
set background=dark
silent! colorscheme gruvbox

" Section: Mappings
nnoremap s <nop>
nnoremap <space> <nop>
nnoremap Q gqap
nnoremap c "_c
nnoremap C "_C
xnoremap . :normal .<cr>
nnoremap Y y$
nnoremap U <c-r>

nnoremap <c-j> <c-w>w
nnoremap <c-k> <c-w>W

nnoremap <left>  <c-w>>
nnoremap <right> <c-w><
nnoremap <up>    <c-w>-
nnoremap <down>  <c-w>+

" Ack???
nnoremap <leader>g :silent grep <c-r><c-w><cr>
xnoremap <leader>g "sy:silent grep <c-r>s<cr>

nnoremap <silent><leader>x :bd<cr>
nnoremap <silent><leader>y :call system('xclip -selection clipboard', @0)<cr>
nnoremap <silent><leader>w :update<cr>
nnoremap <c-l> :noh<bar>diffupdate<bar>call clearmatches()<bar>syntax sync fromstart<cr><c-l>

nnoremap <leader>ev :edit $MYVIMRC<cr>

nmap <C-]> g<C-]>

nmap <silent><leader>cp :let @z=expand("%")<bar>call system('xclip -selection clipboard', @z)<cr>
nmap <silent><leader>cl :let @z=expand("%") . ":" . line('.')<bar>call system('xclip -selection clipboard', @z)<cr>
nmap <silent><leader>cP :let @z=expand("%:p")<bar>call system('xclip -selection clipboard', @z)<cr>

nnoremap / /\v
vnoremap / /\v

xnoremap > >gv
xnoremap < <gv

nnoremap <leader><leader> <c-^>

" Make sure pasting in visual mode doesn't replace paste buffer.
function! RestoreRegister()
  let @" = s:restore_reg
  return ''
endfunction

function! s:Repl()
  let s:restore_reg = @"
  return "p@=RestoreRegister()\<cr>"
endfunction
vmap <silent><expr>p <sid>Repl()

" Readline-like mappings
inoremap <c-a> <c-o>0
cnoremap <c-a> <home>

inoremap <c-b> <left>
cnoremap <c-b> <left>

inoremap <expr><c-d> col('.') > strlen(getline('.')) ? "\<lt>c-d>" : "\<lt>del>"
cnoremap <expr><c-d> getcmdpos() > strlen(getcmdline()) ? "\<lt>c-d>" : "\<lt>del>"

inoremap <c-e> <c-o>$
cnoremap <c-e> <end>

inoremap <expr><c-f> col('.') > strlen(getline('.')) ? "\<lt>c-f>" : "\<lt>right>"
cnoremap <expr><c-f> getcmdpos() > strlen(getcmdline()) ? &cedit : "\<lt>right>"

cnoremap <m-b> <s-left>
cnoremap <m-f> <s-right>
silent! exe "set <s-left>=\eb"
silent! exe "set <s-right>=\ef"

nnoremap sr :%s/<c-r><c-w>//<left>
xnoremap sr "sy:%s/<c-r>s//<left>
nnoremap s* :exe "Ack! '\\b" . expand('<cword>') . "\\b'"<cr>

" Show last search in quickfix (http://travisjeffery.com/b/2011/10/m-x-occur-for-vim/)
nmap g/ :vimgrep /<c-r>//j %<cr>\|:cw<cr>

inoremap <c-u> <c-g>u<c-u>

function! ToggleQuickFix()
  if empty(filter(getwininfo(), 'v:val.quickfix'))
    copen
  else
    cclose
  endif
endfunction
nnoremap <silent><leader>co :call ToggleQuickFix()<cr>

inoremap <Tab> <c-r>=misc#tab_complete<cr>

noremap <silent><c-u> :call smooth_scroll#up(&scroll, 30, 2)<cr>
noremap <silent><c-d> :call smooth_scroll#down(&scroll, 30, 2)<cr>

xnoremap * :<c-u>call misc#search()<cr>//<cr>
xnoremap # :<c-u>call misc#search()<cr>??<cr>

" Section: Text objects
" entire buffer
xnoremap <silent> ie gg0oG$
onoremap <silent> ie :<c-u>execute "normal! m`"<bar>keepjumps normal! ggVG<cr>

" inner line
xnoremap <silent> il <esc>^vg_
onoremap <silent> il :<c-u>normal! ^vg_<cr>

" Source:
" https://stackoverflow.com/questions/44108563/how-to-delete-or-yank-inside-slashes-and-asterisks
for char in [ '_', '.', ':', ',', ';', '<bar>', '/', '<bslash>', '*', '+', '%', '-', '#' ]
  execute 'xnoremap i' . char . ' :<C-u>normal! T' . char . 'vt' . char . '<CR>'
  execute 'onoremap i' . char . ' :normal vi' . char . '<CR>'
  execute 'xnoremap a' . char . ' :<C-u>normal! F' . char . 'vf' . char . '<CR>'
  execute 'onoremap a' . char . ' :normal va' . char . '<CR>'
endfor

if &term =~ "screen" || &term =~ "alacritty" || &term =~ "st"
  let &t_BE = "\e[?2004h"
  let &t_BD = "\e[?2004l"
  exec "set t_PS=\e[200~"
  exec "set t_PE=\e[201~"
endif

if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  set ttymouse=xterm2
else
  let &t_SI = "\<Esc>[6 q"
  let &t_EI = "\<Esc>[2 q"
endif

" Autocmds
augroup vimrc
  autocmd FileType markdown hi link markdownError NONE

  " Clean all useless whitespace.
  autocmd BufWritePre *
    \ if !exists('g:skip_clean_whitespace') && !exists('b:skip_clean_whitespace') |
    \   exe "CleanWhitespace" |
    \ endif

  " Check if the buffer needs to be refreshed from disk (using 'autoread').
  autocmd FocusGained,WinEnter * checktime

  " When editing a file, always jump to the last known cursor position unless this is a git commit.
  au BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif
augroup END

" Commands
command! SudoWrite execute 'silent! write !sudo tee % >/dev/null'<bar>edit!

" Copy a snippet of code without its initial whitespace.
command! -range Snip call s:Snip(<line1>, <line2>)
function! s:Snip(from, to)
  let lines = getbufline('%', a:from, a:to)
  let non_empty_lines = filter(copy(lines), {_, l -> l !~ '^\s*$'})
  let min_whitespace_count = min(map(non_empty_lines, {_, l -> len(matchstr(l, '^\s*'))}))

  if min_whitespace_count > 0
    let whitespace_pattern = '^'.repeat('\s', min_whitespace_count)
    call map(lines, {_, l -> substitute(l, whitespace_pattern, '', '')})
  endif

  let snippet = join(lines, "\n")

  call setreg('"', snippet, 'V')
  call system('xclip -sel clip', snippet)
endfunction

cabbrev snip Snip

" Clean trailing whitespace.
command! CleanWhitespace call s:CleanWhitespace()
function! s:CleanWhitespace()
  let save = winsaveview()
  keeppattern :%s/\s\+$//e
  call winrestview(save)
endfunction

command! -nargs=1 -complete=command Scratch call misc#scratch(<f-args>)

" Section: Plugins
let $FZF_DEFAULT_COMMAND = 'ag --literal --files-with-matches --nocolor --hidden -g ""'
let g:fzf_layout = {'down': '40%'}
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>t :FZF<cr>

let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeIgnore = ['\~$', '^tags$']
let g:NERDTreeMinimalMenu = 1
let g:NERDTreeMinimalUI = 1
let g:NERDTreeMapOpenVSplit = '<C-v>'
let g:NERDTreeCascadeSingleChildDir = 0
nnoremap <leader>d :NERDTreeToggle<cr>
nnoremap <leader>f :NERDTreeFind<cr>

let g:ale_linters = { 'ruby': ['rubocop'] }
let g:ale_linters_explicit = 1
let g:ale_set_highlights = 0
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0
let g:ale_sign_error = '➤'
let g:ale_sign_warning = '➤'

" Ruby settings
let g:ruby_indent_block_style = 'do'
let g:ruby_indent_assignment_style = 'variable'
let g:ruby_indent_hanging_elements = 0
let g:ruby_operators = 1
" let g:ruby_path                      = ''
" let g:rubycomplete_rails             = 0
" let g:rubycomplete_buffer_loading    = 1
" let g:rubycomplete_classes_in_global = 1

" built-in HTML indenting
let g:html_indent_inctags = 'html,head,body,li,p'

let g:vim_markdown_no_extensions_in_markdown = 1
let g:vim_markdown_new_list_item_indent = &shiftwidth

" Splitjoin
let g:splitjoin_split_mapping        = ''
let g:splitjoin_join_mapping         = ''
let g:splitjoin_normalize_whitespace = 1
nmap <silent>sj <Plug>SplitjoinSplit
nmap <silent>sk <Plug>SplitjoinJoin

" Smartword
nmap w  <Plug>(smartword-w)
nmap b  <Plug>(smartword-b)
nmap e  <Plug>(smartword-e)
nmap ge <Plug>(smartword-ge)

xmap w  <Plug>(smartword-w)
xmap b  <Plug>(smartword-b)
xmap e  <Plug>(smartword-e)
xmap ge <Plug>(smartword-ge)

" ack
" let g:ackprg="ag --vimgrep"

" sideways
nnoremap s< :SidewaysLeft<cr>
nnoremap s> :SidewaysRight<cr>

omap <silent>aa <Plug>SidewaysArgumentTextobjA
xmap <silent>aa <Plug>SidewaysArgumentTextobjA
omap <silent>ia <Plug>SidewaysArgumentTextobjI
xmap <silent>ia <Plug>SidewaysArgumentTextobjI

nmap si <Plug>SidewaysArgumentInsertBefore
nmap sa <Plug>SidewaysArgumentAppendAfter
nmap sI <Plug>SidewaysArgumentInsertFirst
nmap sA <Plug>SidewaysArgumentAppendLast

" surround
let g:surround_indent = 1
let g:surround_no_insert_mappings = 1

" vim-exchange
let g:exchange_no_mappings = 1
nmap X <Plug>(Exchange)
xmap X <Plug>(Exchange)

" Multichange
let g:multichange_mapping        = 'sm'
let g:multichange_motion_mapping = 'm'
let g:multichange_save_position  = 1

" Don't use netrw at all, interferes with "clever" autocommands
" let g:loaded_netrwPlugin = 1

" delimitMate/endwise
let g:endwise_no_mappings = 1
let g:delimitMate_expand_space = 0
let g:delimitMate_expand_inside_quotes = 0
imap <expr><cr> pumvisible() ? "\<c-y>" : "\<Plug>delimitMateCR\<Plug>DiscretionaryEnd"

let g:deleft_mapping =  'd<'

if filereadable(expand("~/.vim/magic.vim"))
  source ~/.vim/magic.vim
endif
